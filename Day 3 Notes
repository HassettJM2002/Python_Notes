'''Training Day 3 Python Notes (File IO)'''

More annoying way to open file
  fp.open('myfile.txt')
  fp.close()
  
 Easy way, will close it automatically
  with open('myfile.txt','r') as fp:
  'with opens it' 'r is read only' 'fp becomes the variable for the string'
  
 Reading a file
  print(fp.read(<numofbytes>))
  'will read that the file, <num of bytes> will read up to a certain amount of bytes '
  
  print(fp.readlines()[index])
  "readline reads every line as a list"
  
  print(fp.readline())
  "will read the line in sequential order"

Writing to a file
 with open('myfile.txt', 'w') as fp:
 fp.write('Example string\n')
 
 cat myfile.txt
 will output 
  Example string
 
 write lines
 lines = ['list', 'list2']
 fp.writelines(lines)
 
Copying a files contents
Way 1)
#################################
with open('myfile.txt', 'r') as fp0:
  with open('newfile.txt', 'w') as fp1:
    fp1.write(fp0.read())
################################ 
Way 2)
####################################
with open('myfile.txt', 'r') as fp0:
  lines = fp0.read()
with open('newfile.txt', 'w') as fp1:
  fp1.write(lines)
########################################
Day 3 Runestone Academy
1. with open('travel_plans.txt', 'r') as fp:
    num=len(fp.read())
    
2. with open('emotion_words.txt', 'r') as fp:
    print(fp.readlines())
    listwords = fp.readlines()
    num_words = 0
    for index in range(0,len(listwords)):
        elementsinlist = listwords[index]
        newlist = elementsinlist.split()
        numofwords = len(newlist)
        num_words += numofwords

3. with open('school_prompt.txt','r') as fp:
    num_lines = len(fp.readlines())


4. with open('school_prompt.txt', 'r') as fp:
    beginning_chars = fp.read(30)

5. with open('school_prompt.txt', 'r') as fp:
    list = fp.readlines()
    print(list)
    three = []
    print(len(list))
    numoflines = len(list)
    for item in range(0,numoflines):
        newlist = list[item].split()
        three.append(newlist[2])

6.

7. with open('travel_plans.txt', 'r') as fp:
    first_chars = fp.read(33)

8. with open('school_prompt.txt', 'r') as fp:
    listofwords = fp.read().split()
    lengthoflist = len(listofwords)
    p_words = []
    for item in range(0,lengthoflist):
        eachword = list(listofwords[item])
        lenofword = len(eachword)
        for i in range(0,lenofword):
            if eachword[i] == 'p':
                p_words.append(listofwords[item])
                break

###########################
Data Structures
###########################
Sets

  A set is not organized at all, you can't pull something specific out of it
can only display the whole set, and check if things are in the set
  set can't have a duplicate
  
  Use: to look for duplicates
  Sets are annotated by {<set>}
    s = {1,2,3,4}
    3 in s
    True
    2 in s
    True
  Too add to a set
    s.add{<number>} 'The number you want to add'
  To combine two sets
    <set>.union(<set2>)
    
  To see difference
    <set>.difference(<set2>)
  
  To see what the same is
    <set>.difference(<set2>)


##############################
Dictionaries work off of Key value pairs
Key will pick out of a value
index = key, picks value

Dictionary's are annotated by "{}", but key value pairs are pair with colon

ExDict = {'E-1':'Pvt', 'E-2':'PFC''}

  When you iterate through a dictionary you get the keys
  to iterate through the values, use the iterated keys to iterate the values
  
  for i in exDict: "iterate keys"
    print(exDict)
    
  for i in exDict: "iterate the values"
    print(exDict[i])
    
Example)
  myStr
  'This is an example string'
  
  myDict = {}
  for i in myStr:
    if i in myDict:
      myDict[i] += 1. !!!!!!!!!! IMPORTANT !!!!!!!!! -----> myDict[x] is the key value, 1 is the paired value
    else:
      myDict[i] = 1
########################################
Variable length argument
########################################

Variable length arguements, doesn't know how many arguements, will take them
Denote by
    *args
When referencing the arguements, reference as
    args

sum: adds iterables together

*args creates a tuple


###########################################
Not important functions
###########################################
1).

lambda's, mini function, simple function, does simple thing

example of lambda

use key word "lamda"
assign it to variable

    y = lambda x: x + 100

y becomes a simple function

    print(y(50)) prints 150
    
##############################################    
2).

Lists comprehension
Hard to read, pythonic way of writing lists

Example

  grades = [60 70 30]
  failuires = []
  
  for i in grades:
      if grades < 70:
          failires.append()
          

  one liner
  item for item in list conditional 
  
  failures = [i for i in grades if i < 70]


