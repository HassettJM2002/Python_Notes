Typecasting Data Structures
  Can change one form of data structure to another form of a data strucuture
  
  Example 1)
  tuple([a,b,c..]) will type cast that list to a tuple
  
  Types of Data Structures and they're uses
    Sets () -> no reoccuring values, random, cannot reference data
    List [] -> iterable object, can use methods and functions for iterable objects
    Tuples {} -> order cannot change and unchangeable
    Dictionaries {'key':'value;} -> uses key value pairs, dict[key] = value

  Lists:
    index notated, first element starts at 0
      first element = list[0]
      last element = list[-1]
    replace value at index pos with another value
      a['index'] = 'new value'
    useful methods for lists
      .append('x'), appends x to end of the list
      del 'list'[a,b], deletes values a to the value before b
    Two lists can be added together with +
      list1 + list0 = [a,b,c,..., a,b,c...]
      
  Dictionaries
  myDict = {1:'I', 5:'V', 10:'X'}
  myDict[50] = 'L' add to a dictionary, 50 being the key and L being the value
  
  str = 'blah blah'
  myDict = {}
  for i in str:
    if i not in myDict:
        myDict[i] += 1
      else:
        myDict[i] = 1
        
ip1 = '192.168.28.219'
if int(ip1.split('.')[-1]) in range(0,255):
  print("True")
  
  multicast
  224.0.0.0 > 239.255.255.255
  
  infile = 'infile.txt'
  outfile = 'outfile.txt'
  
  with open(infile, 'r') as fp0:
    with open(outfile, 'w') as fp1:
      fp1.write(fp0.read())
      
  for i in myStr:
    if i.isnumeric():
      print(i)
    if i.isalpha():
      print(i)
    if i.isalnum():
      print(i)
  
  Quick formulas with Data Structures
    See if their are dupilicates in a set
    To be continued
    
    
    
Typecasting Data types
  int()
  float()
  str()
  bool()

List comp
  Example) Find all the even numbers in a list and make it odd
    exlist = [1 2 3 4 5]
    newlist = [(item + 1) for item in exlist if item % 2 == 0]
               output         iterable              conditional
    returns -> [3 5]
    
  List comp
  
  
  Review !
  
  list(range(0,1024)) -> get a list of the range of well known ports
  input() -> input from a user
  format() / f'' -> '{} {} {} @nsa.gov'.format('string','string','string')
  
  list of rocky.spit.wilson@usmc.mil
  parts = email.split('@')
  parts = '.'.join(parts)
  parts = parts.split('.')
  parts[:-1]
  
  fileio
  with open('filename', 'r(ead)/w(rite)') as fp:
    lines = fp.readlines() ##reads entire file as a list, each element is a line as a string
    conetent = fp.read() ##reads entire file as a bigg ass string
    writelines() ## requires list !! need to add newlines
    write() ## requires string !! ned to add to newlines
  



  String 
  
Useful formulas / functions 
len(set('list')) == len('list')	See if there are any duplicates in the set
int('a' ** 0.5) == ('a' == 0.5)	See if the number is a perfect square
min([len(item) for item in 's'.split()])	Find the len of the smallest word in a set
[(2 * a[item]) for item in range(0,len(a))]	Double all the numbers in a list
sqrt()	Takes square root of function
ord() / char()	ord makes it a ordinal number, chr() is the inverse
char'.isupper()	will find if the string has capital or lowercase
.upper / .lower	will make string upper or lower case
.isnumeric()	sees if the number is numeric or not
sort()	changes the list and sorts in small to large
sorted(iterable, reverse=True/False)	doesn't change list, but sorts small to big, has output
.format(arg1, arg2...)	
str'.replace('replace x', 'with y')	replaces x with y
list'.index('x')	x' is what you are looking for, will return index position
reversed('list') will reverse the order of the list
.reverse() changes the list

for counter,item in enumerate(lines0)
  if item != lines1[counter]:
    diffs.append(counter)
